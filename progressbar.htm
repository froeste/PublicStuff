<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Course Time Progress</title>
  <style>
    body { font-family: system-ui, Arial, sans-serif; margin: 1rem; }
    .wrap { max-width: 700px; margin: 0 auto; }
    .title {
      font-size: clamp(1.5rem, 4vw, 3rem);
      font-weight: 700;
      margin-bottom: 1rem;
      text-align: center; line-height: 1.2;
    }
    .label { font-weight: 600; margin-bottom: .25rem; text-align: center; }
    .bar { background:#eee; border-radius: 10px; height: 18px; overflow: hidden; }
    .fill { background: #6c5ce7; height:100%; width: var(--w); transition: width .6s ease; }
    .meta { margin-top: .5rem; font-size: .9rem; color:#444; text-align: center; }

    /* New countdown label (slightly smaller than the countdown) */
    .cd-label {
      margin-top: 1rem;
      font-size: clamp(1rem, 3.5vw, 1.25rem);
      font-weight: 600;
      text-align: center;
      color: #333;
    }

    .countdown {
      margin-top: .35rem;
      font-size: clamp(1.25rem, 5vw, 2rem);
      font-weight: 700;
      text-align: center;
      font-variant-numeric: tabular-nums;
      color: #222; /* default */
    }

    .sr-only { position: absolute; left: -10000px; }
  </style>
</head>
<body>
  <div class="wrap" role="group" aria-labelledby="heading">
    <div id="title" class="title"></div>
    <div id="heading" class="label"></div>
    <div class="bar" aria-label="Progress" aria-live="polite">
      <div class="fill" id="fill"></div>
    </div>

    <div class="meta" id="meta"></div>

    <!-- new: label above countdown -->
    <div id="cdLabel" class="cd-label" aria-hidden="true"></div>

    <!-- countdown under everything -->
    <div id="countdown" class="countdown" aria-live="polite"></div>

    <div class="sr-only" id="sr"></div>
  </div>

  <script>
    const MS_PER_DAY = 86400000;

    function fmtDate(dt){ return dt.toLocaleString(undefined,{dateStyle:'medium'}); }

    function pct(now, start, end){
      const total = end - start;
      if (isNaN(total) || total <= 0) return 0;
      if (now <= start) return 0;
      if (now >= end) return 100;
      return ((now - start) / total) * 100;
    }

    function two(n){ return String(n).padStart(2,'0'); }

    // Days:Minutes:Seconds (D:MM:SS)
    // Note: minutes can exceed 59 because hours are folded into minutes.
    function fmtDMS(ms){
      if (ms <= 0) return '0:00:00';
      // round *up* so 1.2s shows as 00:02 instead of 00:01
      const totalSec = Math.ceil(ms / 1000);
      const days = Math.floor(totalSec / 86400);
      const remainderSec = totalSec - days * 86400;
      const minutes = Math.floor(remainderSec / 60); // may be 0..1439
      const seconds = remainderSec % 60;
      return `${days}:${two(minutes)}:${two(seconds)}`;
    }

    function getNumber(p, ...keys){
      for (const k of keys){
        const v = p.get(k);
        if (v == null) continue;
        const n = Number(v);
        if (!Number.isNaN(n)) return n;
      }
      return null;
    }

    function parseDateish(v){
      if (!v) return null;
      const n = Number(v);
      return !Number.isNaN(n) ? new Date(n) : new Date(v);
    }

    function setQueryParam(key, value){
      const url = new URL(location.href);
      url.searchParams.set(key, value);
      history.replaceState(null, '', url);
    }

    function render(){
      const p = new URLSearchParams(location.search);
      const title = p.get('title') || '';
      const label = p.get('label') || 'Course time elapsed';

      const start = new Date(p.get('start'));
      const end   = new Date(p.get('end'));
      const now   = new Date();

      document.getElementById('title').textContent = title;

      // Progress bar
      if (isNaN(start) || isNaN(end) || end <= start){
        document.getElementById('heading').textContent = 'Invalid dates';
        document.getElementById('meta').textContent = 'Check your start/end parameters.';
      } else {
        const percent = Math.max(0, Math.min(100, pct(now, start, end)));
        document.documentElement.style.setProperty('--w', percent.toFixed(2) + '%');
        document.getElementById('heading').textContent = `${label}: ${percent.toFixed(1)}%`;

        const daysTotal = Math.round((end - start)/MS_PER_DAY);
        const daysLeft  = Math.max(0, Math.ceil((end - now)/MS_PER_DAY));
        const daysDone  = Math.max(0, daysTotal - daysLeft);
        document.getElementById('meta').textContent =
          `${fmtDate(start)} → ${fmtDate(end)} • ${daysDone}/${daysTotal} days elapsed • ${daysLeft} days remaining`;

        document.getElementById('sr').textContent =
          `Progress ${percent.toFixed(1)} percent. ${daysDone} of ${daysTotal} days elapsed.`;
      }

      // Countdown label (optional)
      const cdLabelText = p.get('cd_label') || '';
      const cdLabelNode = document.getElementById('cdLabel');
      cdLabelNode.textContent = cdLabelText;

      // Countdown
      const cdNode = document.getElementById('countdown');
      const cdMins = getNumber(p, 'cd', 'cd_mins');
      let cdUntil = parseDateish(p.get('cd_until'));

      if (cdMins != null && !cdUntil){
        cdUntil = new Date(Date.now() + cdMins * 60_000);
        setQueryParam('cd_until', String(cdUntil.getTime())); // sticky across reloads
      }

      if (!cdUntil){
        cdNode.textContent = '';
        return;
      }

      const remaining = cdUntil - Date.now();
      if (remaining <= 0){
        cdNode.textContent = "0:00:00";
        cdNode.style.color = "#c0392b"; // final red
        return;
      }

      // set text
      cdNode.textContent = fmtDMS(remaining);

      // thresholds: < 5 min (orange), < 1 min (red)
      if (remaining <= 60_000){
        cdNode.style.color = "#c0392b";
      } else if (remaining <= 5*60_000){
        cdNode.style.color = "#e67e22";
      } else {
        cdNode.style.color = "#222";
      }
    }

    render();
    setInterval(render, 1000);
  </script>
</body>
</html>
