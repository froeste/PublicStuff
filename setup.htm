<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Progress Bar Link Builder</title>
<style>
  :root { --gap: 12px; }
  body { font-family: system-ui, Arial, sans-serif; margin: 24px; }
  h1 { font-size: clamp(1.4rem, 2.8vw, 2rem); margin-bottom: 10px; }
  p.tip { color:#444; margin-top:0; }
  form { display:grid; gap: var(--gap); max-width: 980px; }
  fieldset { border:1px solid #ddd; border-radius: 10px; padding: 16px; }
  legend { padding: 0 8px; color:#333; font-weight: 600; }
  .row { display:grid; grid-template-columns: 200px 1fr; gap: 10px; align-items: center; }
  label { font-weight:600; }
  input[type="text"], input[type="date"], input[type="datetime-local"], input[type="number"] {
    width: 100%; padding: 10px; border:1px solid #bbb; border-radius:10px;
  }
  .actions { display:flex; gap:10px; flex-wrap: wrap; }
  button {
    padding: 10px 14px; border:0; border-radius:12px; cursor:pointer;
    background:#6c5ce7; color:#fff; font-weight:600;
  }
  button.secondary { background:#444; }
  button.ghost { background:#f3f3f3; color:#222; border:1px solid #ddd; }
  .out { margin-top: 16px; }
  textarea {
    width: 100%; height: 120px; padding:12px; border:1px solid #bbb; border-radius:10px;
    font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace;
  }
  .urlbox {
    background:#fafafa; border:1px solid #ddd; border-radius:10px; padding:10px; word-break: break-all;
    font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace;
  }
  .help { font-size: .9rem; color:#555; margin-top:-6px; }
  .error { color:#b00020; font-weight:600; }
  .grid2 { display:grid; grid-template-columns: 1fr 1fr; gap:12px; }
  .preview {
    margin-top: 20px; border:1px solid #ddd; border-radius:12px; padding:12px; background:#fafafa;
  }
  .preview h2 { margin: 0 0 8px 0; font-size:1.1rem; }
  iframe#previewFrame { width:100%; height:360px; border:0; background:#fff; }
  @media (max-width: 720px){
    .row { grid-template-columns: 1fr; }
    .grid2 { grid-template-columns: 1fr; }
  }
</style>
</head>
<body>
  <h1>Progress Bar Link Builder</h1>
  <p class="tip">Generate a link or embed code for <code>progressbar.htm</code>, then preview it live.</p>

  <form id="builder" novalidate>
    <fieldset>
      <legend>Required dates (for progress bar)</legend>
      <div class="row">
        <label for="start">Start date</label>
        <input id="start" name="start" type="date" required />
      </div>
      <div class="row">
        <label for="end">End date</label>
        <input id="end" name="end" type="date" required />
      </div>
      <div class="help">Use local dates. The widget computes elapsed % from the viewer’s timezone.</div>
    </fieldset>

    <fieldset>
      <legend>Text</legend>
      <div class="row">
        <label for="title">Big title (optional)</label>
        <input id="title" name="title" type="text" placeholder="e.g., Advanced Ethical Hacking" />
      </div>
      <div class="row">
        <label for="label">Bar label (optional)</label>
        <input id="label" name="label" type="text" placeholder="e.g., Fall Term" />
      </div>
    </fieldset>

    <fieldset>
      <legend>Countdown (optional)</legend>
      <div class="row">
        <label for="cd_label">Countdown label</label>
        <input id="cd_label" name="cd_label" type="text" placeholder="e.g., Activity ends in…" />
      </div>
      <div class="grid2">
        <div class="row">
          <label for="cd">Countdown (minutes)</label>
          <input id="cd" name="cd" type="number" min="1" step="1" placeholder="e.g., 10" />
        </div>
        <div class="row">
          <label for="cd_until">Or count down until</label>
          <input id="cd_until" name="cd_until" type="datetime-local" />
        </div>
      </div>
      <div class="help">Use <strong>either</strong> minutes <em>or</em> a fixed end time. If you provide minutes, the widget will lock in <code>cd_until</code> on first load to prevent reset on refresh.</div>
    </fieldset>

    <fieldset>
      <legend>Output</legend>
      <div class="row">
        <label>Target file</label>
        <div class="help">Publishing from: <code>https://froeste.github.io/PublicStuff/progressbar.htm</code></div>
      </div>

      <div class="actions">
        <button type="button" id="make">Generate</button>
        <button type="button" id="open" class="secondary">Open link</button>
        <button type="button" id="copy" class="ghost">Copy link</button>
        <button type="button" id="copyEmbed" class="ghost">Copy embed code</button>
      </div>

      <div id="err" class="error" role="alert" aria-live="polite"></div>

      <div class="out">
        <div class="urlbox" id="urlbox">Your URL will appear here…</div>
      </div>

      <div class="out">
        <label for="embed">Blackboard iframe embed</label>
        <textarea id="embed" readonly></textarea>
        <div class="help">Paste this into an Ultra Document → Add HTML.</div>
      </div>
    </fieldset>

    <div class="preview">
      <h2>Live preview</h2>
      <iframe id="previewFrame" title="Progress bar preview"></iframe>
    </div>
  </form>

<script>
(function(){
  const BASE = "https://froeste.github.io/PublicStuff/progressbar.htm";

  const startEl = document.getElementById('start');
  const endEl = document.getElementById('end');
  const titleEl = document.getElementById('title');
  const labelEl = document.getElementById('label');
  const cdLabelEl = document.getElementById('cd_label');
  const cdEl = document.getElementById('cd');
  const cdUntilEl = document.getElementById('cd_until');

  const urlBox = document.getElementById('urlbox');
  const embedBox = document.getElementById('embed');
  const err = document.getElementById('err');
  const preview = document.getElementById('previewFrame');

  function ymd(d){
    return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}-${String(d.getDate()).padStart(2,'0')}`;
  }
  function isValidDateStr(s){ const d = new Date(s); return d instanceof Date && !isNaN(d); }

  function buildUrl(){
    err.textContent = "";

    const start = startEl.value.trim();
    const end = endEl.value.trim();
    if (!start || !end){ err.textContent = "Start and End dates are required."; return null; }
    if (!isValidDateStr(start) || !isValidDateStr(end)){ err.textContent = "Invalid dates."; return null; }
    if (new Date(end) <= new Date(start)){ err.textContent = "End date must be after Start date."; return null; }

    const cdMins = cdEl.value ? Number(cdEl.value) : null;
    const cdUntilRaw = cdUntilEl.value.trim();
    if (cdMins && cdUntilRaw){ err.textContent = "Use minutes OR a fixed end time, not both."; return null; }

    const u = new URL(BASE);
    u.searchParams.set('start', start);
    u.searchParams.set('end', end);

    const title = titleEl.value.trim();
    const label = labelEl.value.trim();
    const cdLabel = cdLabelEl.value.trim();
    if (title) u.searchParams.set('title', title);
    if (label) u.searchParams.set('label', label);
    if (cdLabel) u.searchParams.set('cd_label', cdLabel);

    if (cdMins){
      if (!(cdMins > 0 && Number.isFinite(cdMins))){ err.textContent = "Countdown minutes must be positive."; return null; }
      u.searchParams.set('cd', String(Math.floor(cdMins)));
    } else if (cdUntilRaw){
      const dt = new Date(cdUntilRaw);
      if (isNaN(dt)){ err.textContent = "Countdown until time is invalid."; return null; }
      const offMin = -dt.getTimezoneOffset();
      const sign = offMin >= 0 ? "+" : "-";
      const hh = String(Math.floor(Math.abs(offMin)/60)).padStart(2,'0');
      const mm = String(Math.abs(offMin)%60).padStart(2,'0');
      const y = dt.getFullYear();
      const mo = String(dt.getMonth()+1).padStart(2,'0');
      const d = String(dt.getDate()).padStart(2,'0');
      const H = String(dt.getHours()).padStart(2,'0');
      const M = String(dt.getMinutes()).padStart(2,'0');
      const withOffset = `${y}-${mo}-${d}T${H}:${M}:00${sign}${hh}:${mm}`;
      u.searchParams.set('cd_until', withOffset);
    }

    return u.toString();
  }

  function buildEmbed(url){
    return `<iframe
  src="${url}"
  width="100%" height="320" style="border:0" loading="lazy"
  title="Course Progress">
</iframe>`;
  }

  function updateOutputs(){
    const url = buildUrl();
    if (!url){
      urlBox.textContent = "Your URL will appear here…";
      embedBox.value = "";
      preview.removeAttribute('src');
      return null;
    }
    urlBox.textContent = url;
    embedBox.value = buildEmbed(url);
    preview.src = url;
    return url;
  }

  document.getElementById('make').addEventListener('click', updateOutputs);
  document.getElementById('open').addEventListener('click', () => { const url = updateOutputs(); if (url) window.open(url, '_blank'); });
  document.getElementById('copy').addEventListener('click', async () => { const url = updateOutputs(); if (url) await navigator.clipboard.writeText(url); });
  document.getElementById('copyEmbed').addEventListener('click', async () => { const url = updateOutputs(); if (url) await navigator.clipboard.writeText(embedBox.value); });

  const today = new Date(); const plus90 = new Date(Date.now() + 90*24*60*60*1000);
  startEl.value = ymd(today); endEl.value = ymd(plus90);

  document.querySelectorAll('input').forEach(el => { el.addEventListener('input', updateOutputs); el.addEventListener('change', updateOutputs); });

  updateOutputs();
})();
</script>
</body>
</html>
